#!/bin/bash
clear

cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

executar_comando() {
    local comando="$1"
    local mensagem="$2"
    local delay=0.1
    local percent=0
    local bar=""

    echo -e "${YELLOW}${mensagem:0:50}${NC}"
    echo -n ' '
    
    eval "$comando" & local cmd_pid=$!
    
    while kill -0 $cmd_pid 2>/dev/null; do
        percent=$((percent + 1))
        if [ $percent -ge 100 ]; then
            percent=100
        fi
        echo -ne "       \r$percent% [${bar:0:$((percent / 5))}]"
        sleep $delay
        bar=$(printf "%-30s" | tr ' ' '#')
    done

    wait $cmd_pid
    if [ $? -eq 0 ]; then
        percent=100
        echo -ne "       \r$percent% [${bar:0:20}]\n"
    else
        echo -e "\r${RED}Erro ao executar o comando.${NC}"
    fi
    
    echo
    sleep 1
}

multiproxy() {
    bash <(wget -qO- https://raw.githubusercontent.com/vmell0/RustyProxy/refs/heads/main/install.sh)
}

socks() {
    clear
	if ps x | grep -w antcrashvpn.sh | grep -v grep 1>/dev/null 2>/dev/null; then
		echo -e "\E[41;1;37m             PROXY SOCKS              \E[0m"
		echo ""
	fun_socksoff() {
	    for pidproxy in $(screen -ls | grep ".proxy" | awk {'print $1'}); do
            screen -r -S "$pidproxy" -X quit
        done
	    [[ $(grep -wc "antcrashvpn.sh" /etc/autostart) != '0' ]] && {
		    sed -i '/antcrashvpn.sh/d' /etc/autostart
		}
		sleep 1
		screen -wipe >/dev/null
	}
	    echo -e "\033[1;32mDESATIVANDO O PROXY SOCKS\033[1;33m"
		echo ""
		fun_bar 'fun_socksoff'
		echo ""
		echo -e "\033[1;32mPROXY SOCKS DESATIVADO COM SUCESSO!\033[1;33m"
		sleep 3
		menu_proxy
	else
	    clear
		echo -e "\E[44;1;37m             PROXY SOCKS              \E[0m"
		echo ""
		echo -ne "\033[1;32mQUAL PORTA DESEJA ULTILIZAR \033[1;33m?\033[1;37m: "
		read porta
		[[ -z "$porta" ]] && {
			echo ""
			echo -e "\033[1;31mPorta invalida!"
			sleep 3
			clear
			socks
		}
		verif_ptrs $porta
	fun_inisocks() {
		sleep 1
		screen -dmS proxy1 antcrashvpn.sh "$porta"
		[[ $(grep -wc "antcrashvpn.sh" /etc/autostart) = '0' ]] && {
			echo -e "netstat -tlpn | grep -w $porta > /dev/null || screen -dmS proxy1 antcrashvpn.sh $porta" >>/etc/autostart
		} || {
			sed -i '/antcrashvpn.sh/d' /etc/autostart
			echo -e "netstat -tlpn | grep -w $porta > /dev/null || screen -dmS proxy1 antcrashvpn.sh $porta" >>/etc/autostart
		}
	}
		echo ""
		echo -e "\033[1;32mINICIANDO O PROXY SOCKS\033[1;33m"
		echo ""
		fun_bar 'fun_inisocks'
		echo ""
		echo -e "\033[1;32mSOCKS ATIVADO COM SUCESSO\033[1;33m"
		sleep 3
		menu_proxy
	fi
}

squid() {
    addpt_sqd() {
		echo -e "\E[44;1;37m         ADICIONAR PORTA AO SQUID         \E[0m"
		echo -e "\n\033[1;33mPORTAS EM USO: \033[1;32m$sqdp\n"
		if [[ -f "/etc/squid/squid.conf" ]]; then
			var_sqd="/etc/squid/squid.conf"
		elif [[ -f "/etc/squid3/squid.conf" ]]; then
			var_sqd="/etc/squid3/squid.conf"
		else
			echo -e "\n\033[1;31mSQUID NAO ESTA INSTALADO!\033[0m"
			echo -e "\n\033[1;31mRetornando...\033[0m"
			sleep 2
			clear
			fun_squid
		fi
		echo -ne "\033[1;32mQUAL PORTA DESEJA ADICIONAR \033[1;33m?\033[1;37m "
		read pt
		[[ -z "$pt" ]] && {
			echo -e "\n\033[1;31mPorta invalida!"
			sleep 2
			clear
			fun_conexao
		}
		verif_ptrs $pt
		echo -e "\n\033[1;32mADICIONANDO PORTA AO SQUID!"
		echo ""
		sed -i "s/#Portas/#Portas\nhttp_port $pt/g" $var_sqd
		fun_bar 'sleep 2'
		echo -e "\n\033[1;32mREINICIANDO O SQUID!"
		echo ""
		fun_bar 'service squid restart' 'service squid3 restart'
		echo -e "\n\033[1;32mPORTA ADICIONADA COM SUCESSO!"
		sleep 3
		clear
		fun_squid
	}
	rempt_sqd() {
		echo -e "\E[41;1;37m        REMOVER PORTA DO SQUID        \E[0m"
		echo -e "\n\033[1;33mPORTAS EM USO: \033[1;32m$sqdp\n"
		if [[ -f "/etc/squid/squid.conf" ]]; then
			var_sqd="/etc/squid/squid.conf"
		elif [[ -f "/etc/squid3/squid.conf" ]]; then
			var_sqd="/etc/squid3/squid.conf"
		else
			echo -e "\n\033[1;31mSQUID NAO ESTA INSTALADO!\033[0m"
			echo -e "\n\033[1;31mRetornando...\033[0m"
			sleep 2
			clear
			fun_squid
		fi
		echo -ne "\033[1;32mQUAL PORTA DESEJA REMOVER \033[1;33m?\033[1;37m "
		read pt
		[[ -z "$pt" ]] && {
			echo -e "\n\033[1;31mPorta invalida!"
			sleep 2
			clear
			fun_conexao
		}
		if grep -E "$pt" $var_sqd >/dev/null 2>&1; then
			echo -e "\n\033[1;32mREMOVENDO PORTA DO SQUID!"
			echo ""
			sed -i "/http_port $pt/d" $var_sqd
			fun_bar 'sleep 3'
			echo -e "\n\033[1;32mREINICIANDO O SQUID!"
			echo ""
			fun_bar 'service squid restart' 'service squid3 restart'
			echo -e "\n\033[1;32mPORTA REMOVIDA COM SUCESSO!"
			sleep 3.5s
			clear
			fun_squid
		else
			echo -e "\n\033[1;31mPORTA \033[1;32m$pt \033[1;31mNAO ENCONTRADA!"
			sleep 3.5s
			clear
			fun_squid
		fi
	}
	fun_squid() {
		[[ "$(netstat -nplt | grep -c 'squid')" = "0" ]] && inst_sqd
		echo -e "\E[44;1;37m          GERENCIAR SQUID PROXY           \E[0m"
		[[ "$(netstat -nplt | grep -c 'squid')" != "0" ]] && {
			sqdp=$(netstat -nplt | grep 'squid' | awk -F ":" {'print $4'} | xargs)
			echo -e "\n\033[1;33mPORTAS\033[1;37m: \033[1;32m$sqdp"
			VarSqdOn="REMOVER SQUID PROXY"
		} || {
			VarSqdOn="INSTALAR SQUID PROXY"
		}
		echo -e "\n\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33m$VarSqdOn \033[1;31m
[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mADICIONAR PORTA \033[1;31m
[\033[1;36m3\033[1;31m] \033[1;37m• \033[1;33mREMOVER PORTA\033[1;31m
[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33mVOLTAR\033[0m"
		echo ""
		echo -ne "\033[1;32mOQUE DESEJA FAZER \033[1;33m?\033[1;31m?\033[1;37m "
		read x
		clear
		case $x in
		1 | 01)
			inst_sqd
			;;
		2 | 02)
			addpt_sqd
			;;
		3 | 03)
			rempt_sqd
			;;
		0 | 00)
			echo -e "\033[1;31mRetornando...\033[0m"
			sleep 1
			menu_proxy
			;;
		*)
			echo -e "\033[1;31mOpcao Invalida...\033[0m"
			sleep 2
			fun_squid
			;;
		esac
	}
}

websocket() {
    clear
	if ps x | grep -w antcrashvpn2.sh | grep -v grep 1>/dev/null 2>/dev/null; then
		echo -e "\E[41;1;37m             WEBSOCKET              \E[0m"
		echo ""
	fun_wssocksoff() {
		for pidwebsocket in $(screen -ls | grep ".proxy2" | awk {'print $1'}); do
			screen -r -S "$pidwebsocket" -X quit
		done
		[[ $(grep -wc "antcrashvpn2.sh" /etc/autostart) != '0' ]] && {
			sed -i '/antcrashvpn2.sh/d' /etc/autostart
		}
		sleep 1
		screen -wipe >/dev/null
	}
		echo -e "\033[1;32mDESATIVANDO O WEBSOCKET\033[1;33m"
		echo ""
		fun_bar 'fun_wssocksoff'
		echo ""
		echo -e "\033[1;32mWEBSOCKET DESATIVADO COM SUCESSO!\033[1;33m"
		sleep 3
		menu_proxy
	else
		clear
		echo -e "\E[44;1;37m             WEBSOCKET              \E[0m"
		echo ""
		echo -ne "\033[1;32mQUAL PORTA DESEJA ULTILIZAR \033[1;33m?\033[1;37m: "
		read porta
		[[ -z "$porta" ]] && {
			echo ""
			echo -e "\033[1;31mPorta invalida!"
			sleep 3
			clear
			menu_proxy
		}
		verif_ptrs $porta
	fun_iniwssocks() {
		sleep 1
		screen -dmS proxy2 antcrashvpn2.sh "$porta"
		[[ $(grep -wc "antcrashvpn2.sh" /etc/autostart) = '0' ]] && {
			echo -e "netstat -tlpn | grep -w $porta > /dev/null || screen -dmS proxy2 antcrashvpn2.sh $porta" >>/etc/autostart
		} || {
			sed -i '/antcrashvpn2.sh/d' /etc/autostart
			echo -e "netstat -tlpn | grep -w $porta > /dev/null || screen -dmS proxy2 antcrashvpn2.sh $porta" >>/etc/autostart
		}
	}
		echo ""
		echo -e "\033[1;32mINICIANDO O WEBSOCKET\033[1;33m"
		echo ""
		fun_bar 'fun_iniwssocks'
		echo ""
		echo -e "\033[1;32WEBSOCKET ATIVADO COM SUCESSO\033[1;33m"
		sleep 3
		menu_proxy
	fi
}

security() {
    rm -rf /usr/bin/menusec
	curl -s -L -o /usr/bin/menusec https://github.com/xzlordzx/sshpro/raw/main/menusec
	chmod +x /usr/bin/menusec
}

menu_proxy() {
    clear
	[[ $(screen -list | grep -wc 'proxy1') != '0' ]] && sks02="\033[1;32m⬤ " || sks02="\033[1;31m⬤ "
	[[ $(screen -list | grep -wc 'proxy2') != '0' ]] && sks04="\033[1;32m⬤ " || sks04="\033[1;31m⬤ "
	echo -e "\E[44;1;37m          PROXY MANAGER        \E[0m"
	echo -e "\033[0;36m╔════════════•⊱✦⊰•════════════╗\033[0m"
	[[ $(netstat -nplt | grep -wc 'proxy') != '0' ]] && {
	    sks13="\033[1;32m⬤ "
		echo -e "   \033[1;33mMULTI-PROXY: \033[1;32m$(netstat -nplt | grep 'proxy' | awk -F ":" {'print $4'} | xargs)"
	} || {
		sks13="\033[1;31m⬤ "
	}
	[[ "$(netstat -tlpn | grep 'python' | wc -l)" != '0' ]] && {
		echo -e "   \033[1;33mSOCKS/WEBSOCKET: \033[1;32m$(netstat -nplt | grep 'python' | awk {'print $4'} | cut -d: -f2 | xargs)"
		sks400="\033[1;32m⬤ "
	} || {
		sks400="\033[1;31m⬤ "
	}
	[[ "$(netstat -tlpn | grep 'squid' | wc -l)" != '0' ]] && {
		echo -e "   \033[1;33mSQUID: \033[1;32m$(netstat -nplt | grep 'squid' | awk -F ":" {'print $4'} | xargs)"
		sks03="\033[1;32m⬤ "
	} || {
		sks03="\033[1;31m⬤ "
	}
	[[ "$(netstat -tlpn | grep 'websecurity' | wc -l)" != '0' ]] && {
		echo -e "   \033[1;33mSECURITY \033[1;32m$(netstat -nplt | grep 'websecurity' | awk -F ":" {'print $4'} | xargs)"
		stsec="\033[1;32m⬤ "
	} || {
		stsec="\033[1;31m⬤ "
	}
	echo -e "\033[0;36m° ° ° ° ° ° ° ° ° ° ° ° ° ° ° °\033[0m"
	echo -e "\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;37mMULTI-PROXY $sks13\033[1;31m
[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;37mSOCKS $sks02\033[1;31m
[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;37mSQUID $sks03\033[1;31m
[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;37mSECURITY $stsec\033[1;31m
[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;37mWEBSOCKET $sks04\033[1;31m
[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;37mVOLTAR\033[0m"
	echo -e "\033[0;36m╚════════════•⊱✦⊰•════════════╝\033[0m"
	echo -ne "  \033[1;31m➤ \033[1;32mOPÇÃO\033[1;33m\033[1;31m\033[1;37m: ";
    read option
	case $option in
        1 | 01)
		clear
	    [[ ! -e /opt/rustyproxy ]] && {
			echo ""
            executar_comando "multiproxy &> /dev/null" "INSTALANDO.. AGUARDE"
			clear
		}
	    menuproxy
	    ;; 
	    2 | 02)
        clear
        socks
        ;;
        3 | 03)
        clear
        squid
        ;;
        4 | 04)
        clear
	    [[ ! -e /usr/bin/menusec ]] && {
	        echo ""
            executar_comando "security &> /dev/null" "INSTALANDO.. AGUARDE"
			clear
	    }
        menusec
        ;;
        5 | 05)
        clear
        websocket
        ;;
        0 | 00)
	    clear
        conexao
        ;;
        *)
	    echo -e "\n\033[1;31mOpcao invalida!"
	    sleep 2
		menu_proxy
	    ;;
    esac
}
