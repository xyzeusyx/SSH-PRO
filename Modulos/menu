#!/bin/bash

executar_comando() {
    local comando="$1"
    local mensagem="$2"
    local delay=0.1
    local percent=0
    local bar=""

    echo -e "${YELLOW}${mensagem:0:50}${NC}"
    echo -n ' '
    
    eval "$comando" & local cmd_pid=$!
    
    while kill -0 $cmd_pid 2>/dev/null; do
        percent=$((percent + 1))
        if [ $percent -ge 100 ]; then
            percent=100
        fi
        echo -ne "       \r$percent% [${bar:0:$((percent / 5))}]"
        sleep $delay
        bar=$(printf "%-30s" | tr ' ' '#')
    done

    wait $cmd_pid
    if [ $? -eq 0 ]; then
        percent=100
        echo -ne "       \r$percent% [${bar:0:20}]\n"
    else
        echo -e "\r${RED}Erro ao executar o comando.${NC}"
    fi
    
    echo
    sleep 1
}

aguarde () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
[[ ! -d /etc/SSHPlus ]] && rm -rf /bin/menu
${comando[0]} > /dev/null 2>&1
${comando[1]} > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "         \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "         \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}

IP=$(cat /etc/IP)
x="ok"

menu () {

function limit1 () {
   clear
   echo -e "\n\033[1;32mINICIANDO O LIMITER... \033[0m"
   echo ""
   fun_bar 'screen -dmS limiter limiter' 'sleep 3'
   [[ $(grep -wc "limiter" /etc/autostart) = '0' ]] && {
       echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   } || {
       sed -i '/limiter/d' /etc/autostart
	   echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   }
   echo -e "\n\033[1;32m  LIMITER ATIVO !\033[0m"
   sleep 3
   menu
}

function limit2 () {
   clear
   echo -e "\033[1;32mPARANDO O LIMITER... \033[0m"
   echo ""
   fun_stplimiter () {
      sleep 1
      screen -r -S "limiter" -X quit
      screen -wipe 1>/dev/null 2>/dev/null
      [[ $(grep -wc "limiter" /etc/autostart) != '0' ]] && {
          sed -i '/limiter/d' /etc/autostart
      }
      sleep 1
   }
   fun_bar 'fun_stplimiter' 'sleep 3'
   echo -e "\n\033[1;31m LIMITER PARADO !\033[0m"
   sleep 3
   menu
}

atualizar () {
	rm -rf /usr/bin/attscript
	curl -s -L -o /usr/bin/attscript https://github.com/xyzeusyx/SSH-PRO/raw/main/attscript
	chmod +x /usr/bin/attscript
}

badvpn () {
	if ps x | grep -w udpvpn | grep -v grep 1>/dev/null 2>/dev/null; then
        clear
        echo -e "\E[41;1;37m             BADVPN              \E[0m"
        echo ""
        fun_stopbad () {
            sleep 1
            for pidudpvpn in $(screen -ls | grep ".udpvpn" | awk {'print $1'}); do
                screen -r -S "$pidudpvpn" -X quit
	        done
            [[ $(grep -wc "udpvpn" /etc/autostart) != '0' ]] && {
                sed -i '/udpvpn/d' /etc/autostart
            }
            sleep 1
            screen -wipe >/dev/null
        }
        fun_badofff () {
	        sudo systemctl disable --now bad7300.service
		    sudo systemctl stop bad7300.service
		    sudo systemctl daemon-reload
	    }
        echo -e "\033[1;32mDESATIVANDO O BADVPN PRO\033[1;33m"
        echo ""
        fun_stopbad
	    fun_badofff
        echo ""
        echo -e "\033[1;32mBADVPN PRO DESATIVADO COM SUCESSO!\033[1;33m"
        sleep 3
        menu
        else
        clear
        echo -e "\033[1;32mINICIANDO O BADVPN... \033[0m\n"
        fun_udpon () {
            screen -dmS udpvpn /bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 10000 --max-connections-for-client 8
            [[ $(grep -wc "udpvpn" /etc/autostart) = '0' ]] && {
                echo -e "ps x | grep 'udpvpn' | grep -v 'grep' || screen -dmS udpvpn /bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 10000 --max-connections-for-client 8 --client-socket-sndbuf 10000" >> /etc/autostart
            } || {
                sed -i '/udpvpn/d' /etc/autostart
                echo -e "ps x | grep 'udpvpn' | grep -v 'grep' || screen -dmS udpvpn /bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 10000 --max-connections-for-client 8 --client-socket-sndbuf 10000" >> /etc/autostart
            }
            sleep 1
        }
        inst_udp () {
            [[ -e "/bin/badvpn-udpgw" ]] && {
                sleep 0.1
            } || {
                cd $HOME
                wget https://www.dropbox.com/s/48b36clnxkkurlz/badvpn-udpgw -o /dev/null
                mv -f $HOME/badvpn-udpgw /bin/badvpn-udpgw
                chmod 777 /bin/badvpn-udpgw
            }
        }
        fun_badinit () {
	       sudo systemctl enable bad7300.service && sudo systemctl start bad7300.service
        }
        echo ""
        inst_udp
        fun_udpon
	    fun_badinit
        echo ""
        echo -e "\033[1;32mBADVPN ATIVADO COM SUCESSO\033[1;33m"
        sleep 3
        menu
    fi
}

function limit_ssh () {
    [[ $(ps x | grep "limiter"|grep -v grep |wc -l) = '0' ]] && limit1 || limit2
}

function autoexec () {
    if grep "menu;" /etc/profile > /dev/null; then
        clear
        echo -e "\033[1;32mDESATIVANDO AUTO EXECUÇÃO\033[0m"
        offautmenu () {
            sed -i '/menu;/d' /etc/profile
        }
        echo ""
        fun_bar 'offautmenu'
        echo ""
        echo -e "\033[1;31mAUTO EXECUÇÃO DESATIVADO!\033[0m"
        sleep 1.5s
        menu2
    else
        clear
        echo -e "\033[1;32mATIVANDO AUTO EXECUÇÃO\033[0m"
        autmenu () {
            grep -v "^menu;" /etc/profile > /tmp/tmpass && mv /tmp/tmpass /etc/profile
            echo "menu;" >> /etc/profile
        }
        echo ""
        fun_bar 'autmenu'
        echo ""
        echo -e "\033[1;32mAUTO EXECUÇÃO ATIVADO!\033[0m"
        sleep 1.5s
        menu2
    fi
}

menu2() {
    [[ -e /etc/Plus-torrent ]] && stsf=$(echo -e "\033[1;32m⬤") || stsf=$(echo -e "\033[1;31m⬤")
    stsbot=$(ps x | grep "bot_plus"|grep -v grep > /dev/null && echo -e "\033[1;32m⬤" || echo -e "\033[1;31m⬤")
    stsbotteste=$(ps x | grep "bot_teste"|grep -v grep > /dev/null && echo -e "\033[1;32m⬤" || echo -e "\033[1;31m⬤")
    stsbotrev=$(ps x | grep "bot_rev"|grep -v grep > /dev/null && echo -e "\033[1;32m⬤" || echo -e "\033[1;31m⬤")
    autm=$(grep "menu;" /etc/profile > /dev/null && echo -e "\033[1;32m⬤" || echo -e "\033[1;31m⬤")
    [[ $(netstat -nplt | grep -wc 'node') != '0' ]] && dt_sks="\033[1;32m⬤ " || dt_sks="\033[1;31m⬤ "
    [[ ! -e /usr/lib/licence ]] && rm -rf /bin > /dev/null 2>&1
    if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
        system=$(cut -d' ' -f1 /etc/issue.net)
        system+=$(echo ' ')
        system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
    elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
        system=$(cut -d' ' -f1 /etc/issue.net)
        system+=$(echo ' ')
        system+=$(cut -d' ' -f3 /etc/issue.net)
    else
        system=$(cut -d' ' -f1 /etc/issue.net)
    fi
    _ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
    [[ "$(cat /etc/SSHPlus/Exp)" != "" ]] && _expuser=$(cat /etc/SSHPlus/Exp) || _expuser="0"
    [[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
    [[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
    _onli=$(($_ons + $_onop + $_ondrp))
    _ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
    _usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
    _usop=$(printf '%-5s' "$(top -b -n1 | grep "Cpu(s)" | awk '{print $2 + $4 "%"}')")
    _core=$(printf '%-5s' "$(grep -c cpu[0-9] /proc/stat)")
    _system=$(printf '%-10s' "$system")
    _hora=$(printf '%(%H:%M:%S)T')
    _onlin=$(printf '%-5s' "$_onli")
    _userexp=$(printf '%-5s' "$_expuser")
    _tuser=$(printf '%-5s' "$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)")
    swap1=$(printf '%-5s' "$(free -h | grep -i swap | awk {'print $2'})")
    swap2=$(printf '%-5s' "$(free -h | grep -i swap | awk {'print $4'})")
    swap3=$(printf '%-5s' "$(free -h | grep -i swap | awk {'print $3'})")
    clear
    echo -e "\033[0;36m          
          ____ ____  _   _       ____  ____   ___   
         / ___/ ___|| | | |     |  _ \|  _ \ / _ \  
         \___ \___ \| |_| |_____| |_) | |_) | | | | 
          ___) |__) |  _  |_____|  __/|  _ <| |_| | 
         |____/____/|_| |_|     |_|   |_| \_|\___/  
                                                     \033[0m"
    echo -e "\033[0;36m╔═════════════════════════•⊱✦⊰•═════════════════════════╗\033[0m"
    [[ ! -e /tmp/att ]]  && {
        echo -e "\033[0;36m  \033[1;32mSISTEMA           \033[1;31m  \033[1;32mMEMÓRIA RAM      \033[1;31m \033[1;32m PROCESSADOR      \033[1;31m"
        echo -e "\033[0;36m  \033[1;36mOS: \033[1;37m$_system    \033[1;31m  \033[1;36mTotal:\033[1;37m$_ram \033[1;31m  \033[1;36mNucleos: \033[1;37m$_core\033[0m   \033[1;31m"
        echo -e "\033[0;36m  \033[1;36mHora: \033[1;37m$_hora    \033[1;31m  \033[1;36mEm uso: \033[1;37m$_usor \033[1;31m  \033[1;36mEm uso: \033[1;37m$_usop\033[0m    \033[1;31m"
        var01='\033[1;37m•'
    } || {
        echo -e ""
        var01="\033[1;32m!"
    }
    echo -e "\033[0;36m° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° °\033[0m"
    echo -e "\033[0;31m   [\033[1;36m14\033[0;31m] \033[1;37m• \033[1;37mAUTO EXECUCAO $autm \033[0;31m
\033[0;31m   [\033[1;36m15\033[0;31m] \033[1;37m• \033[1;37mATUALIZAR SCRIPT \033[0;31m
\033[0;31m   [\033[1;36m16\033[0;31m] \033[1;37m• \033[1;37mBLOCK TORRENT $stsf \033[0;31m 
\033[0;31m   [\033[1;36m17\033[0;31m] \033[1;37m• \033[1;37mDESINSTALAR SCRIPT \033[0;31m
\033[0;31m   [\033[1;36m18\033[0;31m] \033[1;37m• \033[1;37mBLOQUEADOR DE SITES \033[0;31m
\033[0;31m   [\033[1;36m19\033[0;31m] \033[1;37m• \033[1;37mLIBERAR RESTRIÇÃO DE VPN \033[0;31m
\033[0;31m   [\033[1;36m00\033[0;31m] \033[1;37m• \033[1;37mVOLTAR  \033[1;32m<\033[1;33m<\033[1;31m< \033[0m"
    echo -e "\033[0;36m╚═════════════════════════•⊱✦⊰•═════════════════════════╝\033[0m"
    echo -ne "   \033[1;31m➤ \033[1;32mOPÇÃO\033[1;33m\033[1;31m\033[1;37m: "; read x
    case "$x" in   
        14)
        clear
        autoexec
        ;;
        15)
        clear
        echo ""
        executar_comando "atualiar &> /dev/null" "ATUALIZANDO SCRIPT"
        clear
        attscript
        ;;
        16)
        clear
        blockt
        ;;
        17)
        clear
        delscript
        ;;
        18)
        clear
        blocksite
        ;;
        0|00)
        clear
        menu
        ;;
        *)
        echo -e "\n\033[1;31mOpcao invalida !\033[0m"
        sleep 2
		menu2
		;;
    esac
}

menu3 (){
    clear
    echo -e "\E[44;1;37m              🚀 GERENCIAR USUARIOS 🚀               \E[0m"
    echo -e "\033[0;36m╔═══════════════════════•⊱✦⊰•═══════════════════════╗\033[0m"
    [[ ! -e /tmp/att ]]  && {
        echo -e "\033[1;31m  \033[1;32mOnlines:\033[1;37m $_onlin    \033[1;31m  \033[1;32mExpirados: \033[1;37m$_userexp \033[1;31m  \033[1;32mTotal: \033[1;37m$_tuser\033[0m     \033[1;31m"
        var01='\033[1;37m•'
    } || {
        echo -e ""
        var01="\033[1;32m!"
    }
    echo -e "\033[0;36m° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° °\033[0m"
    echo -e "\033[0;31m   [\033[1;36m01\033[0;31m] \033[1;37m• \033[1;37mCRIAR USUARIO \033[0;31m  
\033[0;31m   [\033[1;36m02\033[0;31m] \033[1;37m• \033[1;37mCRIAR TESTE \033[0;31m 
\033[0;31m   [\033[1;36m03\033[0;31m] \033[1;37m• \033[1;37mREMOVER USUARIO \033[0;31m 
\033[0;31m   [\033[1;36m04\033[0;31m] \033[1;37m• \033[1;37mUSUARIOS ONLINE \033[1;31m  
\033[0;31m   [\033[1;36m05\033[0;31m] \033[1;37m• \033[1;37mMUDAR DATA \033[0;31m 
\033[0;31m   [\033[1;36m06\033[0;31m] \033[1;37m• \033[1;37mALTERAR LIMITE \033[0;31m 
\033[0;31m   [\033[1;36m07\033[0;31m] \033[1;37m• \033[1;37mREMOVER EXPIRADOS \033[0;31m
\033[0;31m   [\033[1;36m00\033[0;31m] \033[1;37m• \033[1;37mVOLTAR  \033[1;32m<\033[1;33m<\033[1;31m< \033[0m"
    echo -e "\033[0;36m╚═══════════════════════•⊱✦⊰•═══════════════════════╝\033[0m"
    echo -ne "   \033[1;31m➤ \033[1;32mOPÇÃO\033[1;33m\033[1;31m\033[1;37m: "; read x
    case "$x" in
        1 | 01)
        clear
        criarusuario
        echo -ne "\n\033[1;31m   ENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
        clear
        ;;
        2 | 02)
        clear
        criarteste
        echo -ne "\n\033[1;31m   ENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
        clear
        ;;
        3 | 03)
        clear
        remover
        sleep 3
        ;;
         4 | 04)
        clear
        sshmonitor
        echo -ne "\n\033[1;31m   ENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
        clear
        ;;      
        5 | 05)
        clear
        mudardata
        sleep 3
        ;;
        6 | 06)
        clear
        alterarlimite
        sleep 3
        ;;
        7 | 07)
        clear
        expcleaner
        echo ""
        sleep 3
        ;;
        0 | 00)
        clear
        menu
        ;;
        *)
        echo -e "\n\033[1;31mOpcao invalida !\033[0m"
        sleep 2
        menu3
        ;;
    esac
}

menu4 (){
    clear
    echo -e "\E[44;1;37m               🚀 GERENCIAR SERVIDOR 🚀                \E[0m"
    echo -e "\033[0;36m╔════════════════════════•⊱✦⊰•════════════════════════╗\033[0m"
    [[ ! -e /tmp/att ]]  && {
        echo -e "\033[0;36m  \033[1;32mSISTEMA           \033[1;31m  \033[1;32mMEMÓRIA RAM      \033[1;31m \033[1;32m PROCESSADOR      \033[1;31m"
        echo -e "\033[0;36m  \033[1;36mOS: \033[1;37m$_system    \033[1;31m  \033[1;36mTotal:\033[1;37m$_ram \033[1;31m  \033[1;36mNucleos: \033[1;37m$_core\033[0m   \033[1;31m"
        echo -e "\033[0;36m  \033[1;36mHora: \033[1;37m$_hora    \033[1;31m  \033[1;36mEm uso: \033[1;37m$_usor \033[1;31m  \033[1;36mEm uso: \033[1;37m$_usop\033[0m    \033[1;31m"
        var01='\033[1;37m•'
    } || {
        echo -e ""
        var01="\033[1;32m!"
    }
    echo -e "\033[0;36m° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° °\033[0m"
    echo -e "\033[0;31m   [\033[1;36m01\033[0;31m] \033[1;37m• \033[1;37mTRAFEGO DE REDE \033[0;31m 
\033[0;31m   [\033[1;36m02\033[0;31m] \033[1;37m• \033[1;37mREINICIAR SISTEMA \033[0;31m 
\033[0;31m   [\033[1;36m03\033[0;31m] \033[1;37m• \033[1;37mREINICIAR SERVIÇOS \033[1;31m
\033[0;31m   [\033[1;36m04\033[0;31m] \033[1;37m• \033[1;37mMUDAR SENHA ROOT \033[0;31m
\033[0;31m   [\033[1;36m05\033[0;31m] \033[1;37m• \033[1;37mMEMORIA SWAPPER \033[0;31m
\033[0;31m   [\033[1;36m00\033[0;31m] \033[1;37m• \033[1;37mVOLTAR  \033[1;32m<\033[1;33m<\033[1;31m< \033[0m"
    echo -e "\033[0;36m╚════════════════════════•⊱✦⊰•════════════════════════╝\033[0m"
    echo -ne "   \033[1;31m➤ \033[1;32mOPÇÃO\033[1;33m\033[1;31m\033[1;37m: "; read x
    case "$x" in
        1 | 01)
        clear
        echo -e "\033[1;33mPARA SAIR CLICK CTRL + C\033[1;36m"
        sleep 2s
        apt install slurm -y && slurm -i eth0
        ;;
        2 | 02)
        clear
        reiniciarsistema
        ;;
        3 | 03)
        clear
        reiniciarservicos
        sleep 3
        ;;
        4 | 04)
        clear
        senharoot
        sleep 3
        ;;
        5 | 05)
        clear
        swapmemory
        ;;
        0 | 00)
        clear
        menu
        ;;
        *)
        echo -e "\n\033[1;31mOpcao invalida !\033[0m"
        sleep 2
        menu3
        ;;
    esac
}

    while true $x != "ok"
    do
    stsl=$(ps x | grep "limiter"|grep -v grep > /dev/null && echo -e "\033[1;32m⬤ " || echo -e "\033[1;31m⬤ ")
    swpp=$(ps x | grep "swap"|grep -v grep > /dev/null && echo -e "\033[1;32m⬤ " || echo -e "\033[1;31m⬤ ")
    stson=$(ps x | grep "onlineapp"|grep -v grep > /dev/null && echo -e "\033[1;32m⬤ " || echo -e "\033[1;31m⬤ ")
    stsu=$(ps x | grep "udpvpn"|grep -v grep > /dev/null && echo -e "\033[1;32m⬤ " || echo -e "\033[1;31m⬤ ")
    [[ $(netstat -nplt | grep -wc 'node') != '0' ]] && dt_sks="\033[1;32m⬤ " || dt_sks="\033[1;31m⬤ "
    if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
        system=$(cut -d' ' -f1 /etc/issue.net)
        system+=$(echo ' ')
        system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
    elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
        system=$(cut -d' ' -f1 /etc/issue.net)
        system+=$(echo ' ')
        system+=$(cut -d' ' -f3 /etc/issue.net)
    else
        system=$(cut -d' ' -f1 /etc/issue.net)
    fi
    _ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
    [[ "$(cat /etc/SSHPlus/Exp)" != "" ]] && _expuser=$(cat /etc/SSHPlus/Exp) || _expuser="0"
    [[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
    [[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
    _onli=$(($_ons + $_onop + $_ondrp))
    _ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
    _usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
    _usop=$(printf '%-5s' "$(top -b -n1 | grep "Cpu(s)" | awk '{print $2 + $4 "%"}')")
    _core=$(printf '%-5s' "$(grep -c cpu[0-9] /proc/stat)")
    _system=$(printf '%-10s' "$system")
    _hora=$(printf '%(%H:%M:%S)T')
    _onlin=$(printf '%-5s' "$_onli")
    _userexp=$(printf '%-5s' "$_expuser")
    _tuser=$(printf '%-5s' "$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)")
    swap1=$(printf '%-5s' "$(free -h | grep -i swap | awk {'print $2'})")
    swap2=$(printf '%-5s' "$(free -h | grep -i swap | awk {'print $4'})")
    swap3=$(printf '%-5s' "$(free -h | grep -i swap | awk {'print $3'})")
    clear
    [[ $(netstat -nplt | grep -wc 'node') != '0' ]] && dt_sks="\033[1;32m⬤ " || dt_sks="\033[1;31m⬤ "
    echo -e "\033[0;36m          
          ____ ____  _   _       ____  ____   ___   
         / ___/ ___|| | | |     |  _ \|  _ \ / _ \  
         \___ \___ \| |_| |_____| |_) | |_) | | | | 
          ___) |__) |  _  |_____|  __/|  _ <| |_| | 
         |____/____/|_| |_|     |_|   |_| \_|\___/  
                                                     \033[0m"
    echo -e "\033[0;36m╔═══════════════════════════•⊱✦⊰•═══════════════════════════╗\033[0m"
    echo -e "\033[0;36m  \033[1;32mSISTEMA           \033[1;31m  \033[1;32mMEMÓRIA RAM      \033[1;31m \033[1;32m PROCESSADOR      \033[1;31m"
    echo -e "\033[0;36m  \033[1;36mOS: \033[1;37m$_system    \033[1;31m  \033[1;36mTotal:\033[1;37m$_ram \033[1;31m  \033[1;36mNucleos: \033[1;37m$_core\033[0m   \033[1;31m"
    echo -e "\033[0;36m  \033[1;36mVersão: \033[1;37m1.0       \033[1;31m  \033[1;36mEm uso: \033[1;37m$_usor \033[1;31m  \033[1;36mEm uso: \033[1;37m$_usop\033[0m    \033[1;31m"
    echo -e "\033[1;31m  \033[1;32mOnlines:\033[1;37m $_onlin    \033[1;31m  \033[1;32mExpirados: \033[1;37m$_userexp \033[1;31m  \033[1;32mTotal: \033[1;37m$_tuser\033[0m     \033[1;31m"
    echo -e "\033[0;36m° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° ° °\033[0m"
    echo -e "\033[0;36m\033[0;31m [\033[1;36m01\033[0;31m] \033[1;37m• \033[1;37mGERENCIAR USUARIO \033[0;31m        [\033[1;36m07\033[0;31m] \033[1;37m• \033[1;37mGERENCIAR SERVIDOR  \033[1;31m      
\033[0;31m [\033[1;36m02\033[0;31m] \033[1;37m• \033[1;37mOTIMIZAR \033[0;31m                 [\033[1;36m08\033[0;31m] \033[1;37m• \033[1;37mLIMITER $stsl\033[1;31m          
\033[0;31m [\033[1;36m03\033[0;31m] \033[1;37m• \033[1;37mBADVPN $stsu\033[0;31m                 [\033[1;36m09\033[0;31m] \033[1;37m• \033[1;37mINFO VPS\033[1;31m
\033[0;31m [\033[1;36m04\033[0;31m] \033[1;37m• \033[1;37mBACKUP \033[0;31m                   [\033[1;36m10\033[0;31m] \033[1;37m• \033[1;37mBOT [TELEGRAM] \033[0;31m                 
\033[0;31m [\033[1;36m05\033[0;31m] \033[1;37m• \033[1;37mSPEEDTEST \033[0;31m                [\033[1;36m11\033[0;31m] \033[1;37m• \033[1;37mFERRAMENTAS \033[1;31m         
\033[0;31m [\033[1;36m06\033[0;31m] \033[1;37m• \033[1;37mMODO DE CONEXAO \033[0;31m          [\033[1;36m00\033[0;31m] \033[1;37m• \033[1;37mSAIR\033[1;31m"  
    echo -e "\033[0;36m╚═══════════════════════════•⊱✦⊰•═══════════════════════════╝\033[0m"
    echo -ne "   \033[1;31m➤ \033[1;32mOPÇÃO\033[1;33m\033[1;31m\033[1;37m: "; read x
    case "$x" in 
        1 | 01)
        menu3
        ;;
        2 | 02)
        clear
        gestor_swap
        echo -ne "\n\033[1;31m   ENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
        clear
        ;;
        3 | 03)
        clear
        badvpn
        ;;
        4 | 04)
        clear
        userbackup
        echo -ne "\n\033[1;31m   ENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
        clear
        ;;
        5 | 05)
        clear
        [[ ! -e /usr/bin/speedtest ]] && {
            fun_bar 'fun_fixspeed'
        }
        clear
        speedtest -p no
        echo -ne "\n\033[1;31m   ENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
        clear
        menu 
        ;;   
        6 | 06)
        clear
        conexao
        ;;
        7 | 07)
        menu4
        ;;
        8 | 08)
        clear
        limit_ssh
        ;;
        9 | 09)
        clear
        detalhes
        echo -ne "\n\033[1;31m   ENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
        clear
        ;;
        10)
        clear
        botssh
        ;;
        11)
        menu2
        ;;
        0 | 00)
        echo -e "\033[1;31m SAINDO DO MENU...\033[0m"
        sleep 2s
        clear
        exit;
        ;;
        *)
        echo -e "\n\033[1;31mOpcao invalida !\033[0m"
        sleep 2
    esac
    done
}
menu